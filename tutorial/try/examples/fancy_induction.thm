Kind nat type.

Type z nat.
Type s nat -> nat.

Define is_nat : nat -> prop by
  is_nat z ;
  is_nat (s N) := is_nat N.

Define even : nat -> prop,
       odd : nat -> prop by
  even z ;
  even (s N) := odd N ;
  odd (s N) := even N.

Theorem odd_even : forall N, even N -> odd (s N).
induction on 1. intros. case H1.
  search.
  case H2. apply IH to H3. search.

Theorem odd_even_alt :
   (forall N, even N -> is_nat N)
/\ (forall N, odd N -> is_nat N).
induction on 1 1. split.
  intros. case H1.
    search.
    apply IH1 to H2. search.
  intros. case H1.
    apply IH to H2. search.

%%

Define ack : nat -> nat -> nat -> prop by
  ack z N (s N) ;
  ack (s M) z R := ack M (s z) R ;
  ack (s M) (s N) R := exists R', ack (s M) N R' /\ ack M R' R.

Theorem ack_total : forall M N,
  is_nat M -> is_nat N -> exists R, is_nat R /\ ack M N R.
induction on 1. induction on 2. intros. case H1 (keep).
  search.
  case H2.
    apply IH to H3 _ with N = s z. search.
    apply IH1 to H1 H4. apply IH to H3 H5. search.
